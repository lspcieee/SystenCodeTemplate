<%-- 
Name: EntityFrameworkCoreMaste.cst
Author: puchbin
Description: 生成CMS模块入口
--%>
<%@ CodeTemplate Language="C#"  ResponseEncoding="UTF-8" Src="PortonCst\Helpers\CsNHibernateHelper.cs" Inherits="CsNHibernateHelper" TargetLanguage="C#" OutputType="None" Debug="True" Description="Generates a complete set of Maps, Business Objects, Manager Objects, and a ManagerFactory for NHibernate, the adds them to the specified .csproj file." %>

<%@ Property Name="ModuleTables" Type="SchemaExplorer.TableSchemaCollection"  Optional="False" Category="1. 数据库设置" Description="请选择模块所包含的表" Filter="SourceTable"%>

<%@ Property Name="ExcludedColumns" Type="CodeSmith.CustomProperties.StringCollection" Default="" Optional="True" Category="1. 数据库设置" Description="使用正则表达式排除表中的列" %>
<%@ Property Name="TablePrefix" Type="System.String" Default=""  Optional="False" Category="1. 数据库设置" Description="生成实体时,需要去除的表前缀.（下划线前边的一部分，不包括下划线）" %>
<%@ Property Name="VersionColumn" Type="System.String" Default="^((R|r)ow)?(V|v)ersion$" Optional="True" Category="1. 数据库设置" Description="获取version字段名称的正则表达式" %>

<%@ Property Name="AssemblyName" Type="System.String" Default="Systen.CMS.Modules.XX" Optional="False" Category="2. 程序集" Description="模块程序集名称" %>

<%@ Property Name="FrameworkNamespace" Type="System.String" Default="Systen.CMS.Framework" Optional="False" Category="3. 命名空间" Description="Framework命名空间" %>
<%@ Property Name="IServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.IService" Optional="False" Category="3. 命名空间" Description="IService命名空间" %>
<%@ Property Name="ServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Service" Optional="False" Category="3. 命名空间" Description="Service命名空间" %>
<%@ Property Name="EntitiesNamespace" Type="System.String"  Default="Systen.CMS.Modules.XX.Domain" Optional="False" Category="3. 命名空间" Description="实体命名空间" %>
<%@ Property Name="DatabaseType" Type="DatabaseTypeEnum" Default="SqlServer" Category="4. 方言适配数据库类型" Description="生成castle配置时使用的方言数据库类型" %>


<%@ Property Name="ModuleName" Type="System.String" Default="信息发布模块" Optional="False" Category="5. 模块配置" Description="模块中文名称" %>
<%@ Property Name="ModuleAuthor" Default="KingDon Soft" Category="5. 模块配置" Description="开发者" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="ModuleWebsite" Default="http://www.kingdonsoft.com/" Category="5. 模块配置" Description="开发者网站" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="ModuleDescription" Default="核心模块" Category="5. 模块配置" Description="描述" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="ModuleCategory" Default="Core" Category="5. 模块配置" Description="种类" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="ModuleVersion" Default="1.0.0" Category="5. 模块配置" Description="版本号" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="ModuleClassName" Default="CoreModule" Category="5. 模块配置" Description="模块接口实现类名称" 
Type="System.String"  Optional="False"  %>
<%@ Property Name="PageType" Type="PageTypeEnum" Default="Quasar" Category="5. 模块配置" Description="宿主类型，Quasar页面"  %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="Microsoft.Build.Engine" %>
<%@ Assembly Name="Microsoft.Build.Utilities" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="NHibernateHelper" Path="..\Common\NHibernateHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<%@ Register Name="BusinessObjectTemplate" Template="PortonCst\Entities\BusinessObject.cst" %>

<script runat="template">
//数据库类型
public enum DatabaseTypeEnum
{
    SqlServer,
}
//生成页面 类型
public enum PageTypeEnum{
    Quasar,
}

public TableSchemaCollection ExcludedTables;
public override void Render(TextWriter writer)
{
    
    ExcludedTables = new TableSchemaCollection();
    if(ModuleTables==null||ModuleTables.Count<1){
        Alert("没有选择要生成的表。属性：ModuleTables");
        return;
    }
    if( string.IsNullOrEmpty( this.TablePrefix)){
        Alert("请设置要清除的表前缀.属性：TablePrefix");
        return;
    }
    string[] excludedColumns = (ExcludedColumns != null) ? ExcludedColumns.ToArray() : new string[0]{};
	HelperInit(this.TablePrefix, this.SystemCSharp, this.KeyWords, excludedColumns, this.VersionColumn, ModuleTables[0].Database.Provider.Name);
	
    foreach(TableSchema table in ModuleTables)
        if(!ExcludedTables.Contains(table) && !table.HasPrimaryKey)
        {
            Alert(
                String.Format("表 \"{0}\" 没有设置主键,将忽略此表.", table.Name)
                );
            ExcludedTables.Add(table);
        }
    
	foreach(TableSchema table in ModuleTables)
		if(!ExcludedTables.Contains(table))
		{
            //RenderEntityFrameworkMaps(table);
			RenderBusinessObjects(table);
            //RenderService(table);
            //RenderManage(table);
		}
	//RenderServicejson();
    //RenderCsproj();
	//RegisterReferences();
    //RenderManagePermissions();
    //RenderModuleCs();
    //Startup();
    //Program();
    Alert(string.Format("代码生成完成,\n\n首次生成：请在解决方案'3.1内容模型'或'3.2模块扩展'添加现有项目文件'{0}.csproj'	\n\n不是首次生成：请将新增表对应的Domain，Mappings，Service文件包含到项目'{0}'中，	\n并将Mappings中后缀为'Map.cs'的文件'生成操作设置主键映射关系'。",this.AssemblyName));
}






//生成实体类
private void RenderBusinessObjects(TableSchema table)
{
	string fileName = String.Format("{0}{1}.cs", GetFolder(@"TestGenerateDomain\Domain"), GetTableClassName(table));

	//检测配置文件已存在，主文件存在不再生成
    //if(File.Exists(fileName)){
    //    return;
    //}
	
    //代码生成区域实体
	BusinessObjectTemplate businessObject = this.Create<BusinessObjectTemplate>();
	businessObject.EntitiesNamespace = this.EntitiesNamespace;
	businessObject.SourceTable = table;
	businessObject.ExcludedTables = this.ExcludedTables;
    businessObject.FrameworkNamespace = this.FrameworkNamespace;
    businessObject.BaseClassName = "Entity";
	businessObject.RenderToFile(GetOutputFile(fileName, null), true);
    
    //实际实体
    businessObject.BaseClassName = "BaseEntity";
	 fileName = String.Format("{0}{1}.cs", GetFolder(@"Domain\Models"), GetTableClassName(table));
    businessObject.RenderToFile(GetOutputFile(fileName, null), true);
}



private void RegisterReferences()
{
    //注册组件

}

private OutputFile GetOutputFile(string fileName, string dependentUpon, params object[] metaData)
{
	OutputFile outputFile = new OutputFile(fileName);
	
	if(!String.IsNullOrEmpty(dependentUpon))
		outputFile.DependentUpon = Path.GetFullPath(dependentUpon);
	
	if(metaData.Length % 2 != 0)
		throw new Exception("Invalid Metadata: Provide 2 objects per entry, a String (key) followed by an Object.");
	for(int x=0; x<metaData.Length; x+=2)
    	outputFile.Metadata.Add(metaData[x].ToString(), metaData[x+1]);
		
	return outputFile;
}

/// <summary>
/// 获取目录
/// </summary>
/// <param name="folder"></param>
/// <returns></returns>
private string GetFolder(string folder)
{
	if (folder.Contains(".") && !folder.EndsWith("."))
        folder = folder.Substring(folder.LastIndexOf('.')+1);
		
	if(String.IsNullOrEmpty(folder))
		folder = String.Empty;
	else
	{
		if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
			
		if (!folder.EndsWith("\\"))
			folder = String.Format("{0}\\", folder);
	}
	return folder;
}
/// <summary>
///  
/// </summary>
/// <param name="folder"></param>
/// <returns></returns>
private string GetLastAssemblyName()
{
    var AssemblyNames= this.AssemblyName.Split('.');
	 
	return AssemblyNames[AssemblyNames.Length-1];
}
</script>