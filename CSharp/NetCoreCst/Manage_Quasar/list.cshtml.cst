	<%-- 
Name: list.cshtml.cst
Author: lspcieee
Description: 列表页面生成
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\CsNHibernateHelper.cs" Inherits="CsNHibernateHelper"　 ResponseEncoding="UTF-8" TargetLanguage="HTML" Debug="False" Description="Generates an editable Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="FrameworkNamespace" Type="System.String" Default="Systen.CMS.Framework" Optional="False" Category="3b. 命名空间" Description="Framework命名空间" %>
<%@ Property Name="IServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.IService" Optional="False" Category="3b. 命名空间" Description="IService命名空间" %>
<%@ Property Name="ServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Service" Optional="False" Category="3b. 命名空间" Description="Service命名空间" %>
<%@ Property Name="EntitiesNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Entities" Optional="False" Category="3b. 命名空间" Description="实体命名空间" %>
<%@ Property Name="AssemblyName" Type="System.String" Default="Systen.CMS.Modules.XX" Optional="False" Category="3b. 程序集" Description="模块程序集名称" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\..\Common\NHibernateHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>

<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<%
TableSchemaCollection ExcludedTables = new TableSchemaCollection();
EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables);
List<EntityMember> entityManagerList=entityManager.MembersNoKeyNoVersion.Where(m =>m.Column.Description.Contains("[search]")).ToList();
    //获取主键名称
    string primaryKeyName="Id";
	//Primary Key
	if(entityManager.PrimaryKey.IsCompositeKey) { 

	} else {
        primaryKeyName= entityManager.PrimaryKey.KeyColumn.PropertyName;
	} 
    //获取总数量
    int rowsCount=entityManagerList.Count;
%>
<template>
  <div class="q-pa-md">
    <q-toolbar class="breadcrumbs row items-start q-col-gutter-sm">
      <q-breadcrumbs class="text-brown">
        <template v-slot:separator>
          <q-icon size="1.5em"
                  name="chevron_right"
                  color="primary" />
        </template>
        <q-breadcrumbs-el label="<%= ClearNote(SourceTable.Description) %>管理" icon="home" />
        <q-breadcrumbs-el label="<%= ClearNote(SourceTable.Description) %>列表" />
        <q-btn unelevated color="primary" icon="add" :disable="loading" label="添加<%= ClearNote(SourceTable.Description) %>" @click="onAddClick" />

        <q-btn-group outline unelevated style="display:none;" v-show="showToolBbuttons">
          <q-btn outline color="primary" icon="delete" label="删除" v-on:click="onItemDeleteClick" />
        </q-btn-group>
      </q-breadcrumbs>
      <q-space />
      <div class=" row">
        <div class="col">
         <% if(rowsCount>0) {%>
          <!--搜索开始-->
          <q-input dense
                   outlined
                   v-model="searchPara.<%= entityManagerList[0].PropertyName %>" label="<%=GetDescription(entityManagerList[0]) %>">
            <template v-slot:append>
              <q-btn round dense flat icon="search" v-on:click="onSearch" />
            </template>
            
            <template v-slot:after>
              <q-btn round dense flat icon="more_horiz">
                <q-menu anchor="bottom right" self="top right" :offset="[0, 10]">
                  <q-card style="min-width: 500px">
                    <q-item-label header>高级搜索</q-item-label>
                    <q-card-section class="row q-col-gutter-md">
                    <% foreach(EntityMember em in entityManagerList){%>
                     <div class="col-6">
                        <q-input dense
                                 outlined
                                 v-model="searchPara.<%= em.PropertyName %>" label="<%=GetDescription(em) %>" />
                      </div>
                       <%} %>
                    </q-card-section>
                     <q-card-section>
                      <q-item-section>
                        <q-btn outline v-close-popup color="primary" icon="search" label="搜索" v-on:click="onSearch" />
                      </q-item-section>
                    </q-card-section>
                  </q-card>
                </q-menu>
                <q-tooltip content-class="bg-black" :offset="[10, 10]">
                  高级搜索
                </q-tooltip>
              </q-btn>
            </template>
          </q-input>
          <!--搜索结束-->
          <%} %>
        </div>
      </div>

    </q-toolbar>
    <q-table :data="listData"
             :columns="columns"
             row-key="Id"
             selection="multiple"
             table-class="list-table"
             card-class="list-card main-content  q-ma-md"
             :pagination.sync="pagination"
             :selected.sync="selected"
             :selected-rows-label="getSelectedString"
             @request="onTableRequest"
             :loading="loading"
             binary-state-sort>
      <!--自定义多选头部-->
      <template v-slot:header-selection="scope">
        <q-checkbox v-model="scope.selected" />
      </template>

      <!--自定义多选每行-->
      <template v-slot:body-selection="scope">
        <q-checkbox v-model="scope.selected" />
      </template>
      <!--加载状态-->
      <template v-slot:loading>
        <q-inner-loading showing color="primary" />
      </template>
      <!--自定义表格区域v-slot:body-cell-[列名]="props"-->
      <template v-slot:body-cell-tool="props">
        <q-td :props="props">
          <div>
            <q-btn flat dense color="primary" label="修改" icon="edit" @click="onItemEditClick(props)">
            </q-btn>
            <q-btn flat dense color="primary" label="删除" icon="delete" @click="onItemDeleteClick(props)">
            </q-btn>
          </div>

        </q-td>
      </template>

      <!--自定义某一个标题单元格：v-slot:header-cell-[列名]="props"    -->
      <template v-slot:header-cell-tool="props">
        <q-th :props="props" style="">
          {{ props.col.label }}
        </q-th>
      </template>

      <!--自定义分页区域-->
      <template v-slot:pagination="scope">
        <q-btn icon="first_page"
               color="grey-8"
               round
               dense
               flat
               :disable="scope.isFirstPage"
               @click="scope.firstPage" />
        <q-btn icon="chevron_left"
               color="grey-8"
               round
               dense
               flat
               :disable="scope.isFirstPage"
               @click="scope.prevPage" />
        <q-pagination flat
                      unelevated
                      v-model="scope.pagination.page"
                      color="secondary"
                      @input="gotoPage"
                      :max-pages="6"
                      :boundary-numbers="true"
                      :max="scope.pagesNumber" />
        <q-btn icon="chevron_right"
               color="grey-8"
               round
               dense
               flat
               :disable="scope.isLastPage"
               @click="scope.nextPage" />
        <q-btn icon="last_page"
               color="grey-8"
               round
               dense
               flat
               :disable="scope.isLastPage"
               @click="scope.lastPage" />
      </template>

      <!--todo: 自定义无数据区域-->
      <template v-slot:no-data="{ icon, message, filter }">
        <div class="full-width row flex-center text-accent q-gutter-sm">
          <q-icon size="2em" name="sentiment_dissatisfied" />
          <span>
            暂无数据... {{ message }}
          </span>
          <q-icon size="2em" :name="filter ? 'filter_b_and_w' : icon" />
        </div>
      </template>
    </q-table>
    <!--编辑UI-->
    <q-dialog persistent v-model="editIsShow">
      <!--子组件的使用：
            id：传递id值
            width：宽度，单位和css一样
            height：高度，单位和css一样
      -->
      <<%= GetTableClassName(SourceTable) %>Edit :id="editId" width="800px" height="600px" @exit="onEditClose" />
    </q-dialog>
  </div>

</template>
<script>
  import <%= GetTableClassName(SourceTable) %>Edit from './<%= GetTableClassName(SourceTable) %>Edit.vue'
  export default {
    name: '<%= GetTableClassName(SourceTable) %>List',
    components: { <%= GetTableClassName(SourceTable) %>Edit },
    data() {
      return {
        // table中已经选择的数据
        editId: 0,
        rootUrl: 'api/v1/<%=this.AssemblyName %>/<%= GetTableClassName(SourceTable) %>/',
        editIsShow: false,
        selected: [],
        // 是否正在加载服务端数据
        loading: false,
        // 搜索条件
        searchPara: {
          <% foreach(EntityMember em in entityManagerList){%>
          <%= em.PropertyName %>:'',
          <%} %>
        },
        pagination: {
          page: 1,
          rowsPerPage: 20,
          rowsNumber: 0
        },
        columns: [
          {
            // 标识列
            name: 'Id',
            // 头部标签
            label: '序号',
            // 行对象属性以确定此列的值
            field: row => row.Id,
            // （可选）如果我们使用可见列，这个列将始终可见
            required: true,
            // （可选）对齐
            align: 'left',
            format: val => `${val}`,
            style: 'width: 3%',
            classes: '',
            // （可选）告诉QTable你想要这个列可排序
            sortable: false
          },
          <% foreach(EntityMember em in entityManagerList){%>
          { name: '<%= em.PropertyName %>', field: '<%= em.PropertyName %>', label: '<%=GetDescription(em) %>', align: 'left', sortable: false },
          <%} %>
          { name: 'tool', field: 'Id', label: '操作' }
        ],
        listData: []
      }
    },
    methods: {
      //获取列表
      getPageList() {
        var paraList = this.searchPara
        this.loading = true
         paraList.pageSize = this.pagination.rowsPerPage
        paraList.pageNumber = this.pagination.page
       
        //获取列表
        this.$axios.get(this.rootUrl + 'GetList', {
          params: paraList
        })
          .then((response) => {
            var responseData = response.data
            if (responseData.StatusCode === 0) {
              this.$errorInfo(responseData.Message)
              return
            }
            // 清除现有数据并添加新数据
            this.listData = responseData.Result.DataList
            // 使用适当的值更新RowScont
            this.pagination.rowsNumber = responseData.TotalCount
           
            //装载指示器转向
            this.loading = false
            this.selected = []
          })
      },
      //添加
      onAddClick() {
        this.editIsShow = true
        this.editId = 0
      },
      //修改
      onItemEditClick(props) {
        this.editIsShow = true
        this.editId = props.row.Id
      },
      //删除
      onItemDeleteClick(props) {
        var idList = []
        if (props.row !== undefined) {
          idList.push(props.row.Id)
        } else if (this.selected.length > 0) {
          //批量删除
          for (var i = 0; i < this.selected.length; i++) {
            idList.push(this.selected[i].Id)
          }
        } else {
          this.$errorInfo('请选择要删除的数据')
          return
        }
        this.deleteItem(idList, '即将删除数据，确定操作吗?', 'BatchDelete')
      },
      //统一删除
      deleteItem(idList, message, action) {
        this.$confirm(message)
          .onOk(() => {
            // 点击确定按钮事件 提交
            this.$axios.post(this.rootUrl + action, { idList: idList })
              .then((response) => {
                var responseData = response.data
                var updateStatus = responseData.StatusCode === 1
                //错误提示
                if (!updateStatus) {
                  this.$errorInfo(responseData.Message)
                  return
                }
                //成功刷新
                this.$succeedInfo(responseData.Message)
                this.refresh()
              })
          }).onCancel(() => {
            // 点击取消按钮事件
            return false
          })
      },
      //关闭
      onEditClose() {
        this.editIsShow = false
        this.editId = 0
        this.refresh()
      },
      //跳转页面
      gotoPage(page) {
        if (this.pagination.page === page) {
          return
        }
        this.pagination.page = page
        this.getPageList()
      },
      //查询
      onSearch() {
        if (this.pagination.page !== 1) {
          this.pagination.page = 1
        }
        this.getPageList()
      },
      //上下页 table 更新
      onTableRequest(props) {
        this.pagination.page = props.pagination.page
        this.pagination.rowsPerPage = props.pagination.rowsPerPage
        this.getPageList()
      },
      //关闭刷新页面
      refresh() {
       this.getPageList()
      },
      //选中行数
      getSelectedString() {
        return this.selected.length === 0 ? '' : `已选择${this.selected.length}行，一共${this.listData.length}行`
      }
    },
    //载入事件
    mounted: function () {
      //首次加载列表
      this.getPageList()
    },
    //计算
    computed: {
      showToolBbuttons: function () {
        return this.selected.length > 0
      },
      pagesNumber() {
        return Math.ceil(this.listData.length / this.pagination.rowsPerPage)
      }

    }
  }
</script>