<%-- 
Name: edit.cshtml.cst
Author: lspcieee
Description: 编辑页面生成
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\CsNHibernateHelper.cs" Inherits="CsNHibernateHelper"　 ResponseEncoding="UTF-8" TargetLanguage="html" Debug="False" Description="Generates an editable Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="FrameworkNamespace" Type="System.String" Default="Systen.CMS.Framework" Optional="False" Category="3b. 命名空间" Description="Framework命名空间" %>
<%@ Property Name="IServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.IService" Optional="False" Category="3b. 命名空间" Description="IService命名空间" %>
<%@ Property Name="ServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Service" Optional="False" Category="3b. 命名空间" Description="Service命名空间" %>
<%@ Property Name="EntitiesNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Entities" Optional="False" Category="3b. 命名空间" Description="实体命名空间" %>
<%@ Property Name="AssemblyName" Type="System.String" Default="Systen.CMS.Modules.XX" Optional="False" Category="3b. 程序集" Description="模块程序集名称" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\..\Common\NHibernateHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>

<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<%
TableSchemaCollection ExcludedTables = new TableSchemaCollection();
EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables);
List<EntityMember> entityManagerList=entityManager.MembersNoKeyNoVersion.Where(m => !m.Column.Description.Contains("[hide]")).ToList();
    //获取主键名称
    string primaryKeyName="Id";
	//Primary Key
	if(entityManager.PrimaryKey.IsCompositeKey) { 

	} else {
        primaryKeyName= entityManager.PrimaryKey.KeyColumn.PropertyName;
	} 
   
%>
<template>
  <q-card class="edit-card" :style="{ height: height, maxHeight: height,width:width,maxWidth:width }">
    <q-form ref="editForm" class="column" :style="{ height: '100%' }">
      <!--编辑头部-->
      <q-card-section class="edit-card-top">
        <q-toolbar class="absolute-top bg-primary text-white">
          <q-avatar>
            <i class="icon line-user line-font"></i>
          </q-avatar>
          <q-toolbar-title v-html="title"><%= ClearNote(SourceTable.Description) %>编辑</q-toolbar-title>
          <q-space />
          <q-btn flat round dense v-close-popup>
            <i class="icon line-close line-font"></i>
          </q-btn>
        </q-toolbar>
        &nbsp;
      </q-card-section>

      <!--class：scroll 自动出现滚动条-->
      <q-scroll-area class="col">
        <q-card-section class="row q-col-gutter-md">
          <% foreach(EntityMember em in entityManagerList){%>
          <div class="col-6">
             <q-input dense outlined clearable clear-icon="close" class="required"
                     v-model="editData.<%= em.PropertyName %>" label="<%=GetDescription(em)%>"
             <%if(!em.Column.AllowDBNull && em.Column.SystemType != typeof(System.Boolean)){%>
                     lazy-rules
                     :rules="[ val => val!==null && !this.$validator.isEmpty(val) || '请填写<%=GetDescription(em)%>']" <%}%> />
        </div>
          <%} %>
          <div class="col-6">
            <q-select dense outlined emit-value map-options
                      v-model="editData.IsDeleted"
                      :options="options.DeletedStatusList"
                      option-value="Key"
                      option-label="Value"
                      label="删除状态" />

          </div>
        </q-card-section>
      </q-scroll-area>
      <q-separator />
      <div class="cart-toolbar q-gutter-sm" align="center">
        <q-btn v-if="!isUpdate" unelevated label="添加" color="primary" icon="done" v-on:click="onAddSaveClick" />
        <q-btn v-if="isUpdate" unelevated label="保存" color="primary" icon="done" v-on:click="onUpdateSaveClick" />
        <q-btn unelevated label="取消" color="grey-3" text-color="black" icon="close" v-close-popup />
      </div>
    </q-form>
  </q-card>
</template>

<script>
  export default {
    name: '<%= GetTableClassName(SourceTable) %>Edit',
    data() {
      var options = {
       //删除状态
        DeletedStatusList: [
          { Key: false, Value: '未删除' },
          { Key: true, Value: '已删除' }
        ]
      }
      //返回数据
      return {
        rootUrl: 'api/v1/<%=this.AssemblyName %>/<%= GetTableClassName(SourceTable) %>/',
        editData: {},
        options: options
      }
    },
    //页面设置
    props: {
      width: {
        type: String,
        required: ''
      },
      height: {
        type: String,
        required: ''
      },
      id: {
        type: Number,
        required: ''
      }
    },
    methods: {
      //退出
      onExit() {
        this.$emit('exit')
      },
      //获取编辑数据
      loadData() {
        var apiUrl = this.rootUrl + 'GetDefaultInstance'
        var paramsInfo = {}
        if (this.isUpdate) {
          apiUrl = this.rootUrl + 'Get'
          paramsInfo = { id: this.id }
        }
        //获取模型
        this.$axios.get(apiUrl, { params: paramsInfo })
          .then((response) => {
            var responseData = response.data
            if (responseData.StatusCode === 0) {
              this.$errorInfo(responseData.Message)
              return
            }
            //编辑数据绑定
            this.editData = responseData.Result.<%= GetTableClassName(SourceTable) %>
          })
      },
      //提交数据
      submitData(action) {
        //提交
        this.$axios.post(this.rootUrl + action, { editItem: this.editData })
          .then((response) => {
            var responseData = response.data
            var updateStatus = responseData.StatusCode === 1
            //提示
            if (!updateStatus) {
              this.$errorInfo(responseData.Message)
              return
            }
            // 编程方式退出界面
            this.$succeedInfo(responseData.Message)
            this.onExit()
          })
      },
      //添加保存
      onAddSaveClick() {
        //手动触发表单验证
        this.$refs.editForm.validate().then(success => {
          if (success) {
            // 验证通过执行服务端请求
            this.submitData('Insert')
          } else {
            // 验证不通过
            this.$errorInfo('请先完善资料')
          }
        })
      },
      //修改保存
      onUpdateSaveClick() {
        //手动触发表单验证
        this.$refs.editForm.validate().then(success => {
          if (success) {
            // 验证通过执行服务端请求
            this.submitData('Update')
          } else {
            // 验证不通过
            this.$errorInfo('请先完善资料')
          }
        })
      }
    },
    mounted: function () {
      //载入编辑对象
      this.loadData()
    },
    computed: {
      isUpdate: function () {
        return (this.id !== undefined && this.id > 0)
      },
      title: function () {
        return (this.id !== undefined && this.id > 0) ? '<%= ClearNote(SourceTable.Description) %>编辑' : '<%= ClearNote(SourceTable.Description) %>添加'
      }
    }
  }
</script>
