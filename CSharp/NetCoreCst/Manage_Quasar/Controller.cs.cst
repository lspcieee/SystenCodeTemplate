<%-- 
Name: list.aspx.cs.cst
Author: lspcieee
Description: 列表页面cs生成
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\CsNHibernateHelper.cs" Inherits="CsNHibernateHelper"　 ResponseEncoding="UTF-8" TargetLanguage="C#" Debug="False" Description="Generates an editable Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="FrameworkNamespace" Type="System.String" Default="Systen.CMS.Framework" Optional="False" Category="3b. 命名空间" Description="Framework命名空间" %>
<%@ Property Name="IServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.IService" Optional="False" Category="3b. 命名空间" Description="IService命名空间" %>
<%@ Property Name="ServiceNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Service" Optional="False" Category="3b. 命名空间" Description="Service命名空间" %>
<%@ Property Name="EntitiesNamespace" Type="System.String" Default="Systen.CMS.Modules.XX.Entities" Optional="False" Category="3b. 命名空间" Description="实体命名空间" %>
<%@ Property Name="AssemblyName" Type="System.String" Default="Systen.CMS.Modules.XX" Optional="False" Category="3b. 程序集" Description="模块程序集名称" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="NHibernateHelper" Path="..\..\..\Common\NHibernateHelper" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="NHibernateHelper" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>

<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<%
TableSchemaCollection ExcludedTables = new TableSchemaCollection();
EntityManager entityManager = new EntityManager(SourceTable, ExcludedTables);
List<EntityMember> entityManagerList=entityManager.MembersNoKeyNoVersion.Where(m => !m.Column.Description.Contains("[hide]")).ToList();
    //获取主键名称
    string primaryKeyName="Id";
    //Primary Key
	if(entityManager.PrimaryKey.IsCompositeKey) { 

	} else {
        primaryKeyName= entityManager.PrimaryKey.KeyColumn.PropertyName;
	} 
    
   bool isDelete=entityManager.MembersNoKeyNoVersion.SingleOrDefault(m=>m.PropertyName=="IsDeleted")==null;
%>
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Systen.Framework.Dao;
using Systen.Framework.Domain;
using Systen.Framework.Module;
using Systen.Framework.Module.Menu;
using <%= this.EntitiesNamespace %>;
using <%= this.IServiceNamespace %>;

namespace <%= this.AssemblyName %>.Controllers
{
    public class <%= GetTableClassName(SourceTable) %>Controller : ApiControllerBase
    {   
        /// <summary>
        /// <%= SourceTable.Description %>操作对象
        /// </summary>
        public I<%= GetTableClassName(SourceTable) %>Service <%= GetTableClassName(SourceTable) %>Service { get; set; }
        
        <% 
        var listParameter=string.Empty;
        foreach(EntityMember em in entityManager.MembersNoKeyNoVersion) { 
            if(DescriptionContains(em,"[search]")){
                listParameter+= ", string "+ToProperCase( em.PropertyName)+"=\"\"";
            }
        }
        %>
           
            
        //加载列表
        [HttpGet]
        public async Task<OperationResult> <%=GetTableClassName(SourceTable)%>List(int pageSize = 20, int pageNumber = 1 <%=listParameter%>){
            var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "获取数据失败!"
            };
			IQueryable<<%=GetTableClassName(SourceTable)%>> queryable = <%=GetTableClassName(SourceTable)%>Service.Table;
            //todo:逻辑删除过滤  可以直接删除
            <%if(isDelete){ %>
            queryable = queryable.Where(dt => !dt.IsDeleted);
             <%} %>
            <%-- 根据数据库中的标记生成对应要搜索的字段--%>
            <% foreach(EntityMember em in entityManager.MembersNoKeyNoVersion) { 
                    if(DescriptionContains(em,"[search]")){
                %>

            //<%=GetDescription(em) %>
            if (!string.IsNullOrEmpty(<%= ToProperCase(em.PropertyName) %>))
            {
                 queryable = queryable.Where(dt => dt.<%= em.PropertyName %> == <%= ToProperCase(em.PropertyName) %>.Trim());
            }
                <% 
                }
            } %>
            //排序
            queryable = queryable.OrderByDescending(dt => dt.<%=primaryKeyName%>);
            //排序
            //IOrderedQueryable<Manager> 
            //    OrderBy(IQueryable<Manager> order)
            //    => order.OrderByDescending(manager => manager.OrderNumber);
            
			IPageList<<%= GetTableClassName(SourceTable) %>> pageList =await <%= GetTableClassName(SourceTable) %>Service.GetPageList(queryable, null, null, pageNumber, pageSize);
            
            IList<dynamic> dataList = pageList.Items.Select(
                dataItem =>
                {
                    dynamic dItem= new {
					Id=dataItem.Id.ToString(),
			 <% foreach(EntityMember em in entityManager.MembersNoKeyNoVersion) { 
                    if(!DescriptionContains(em,"[hide]")){%>
                //<%=GetDescription(em) %>
                        <%if(em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.Boolean)){%>
                <%=em.PropertyName%> = dataItem.<%=em.PropertyName%>.HasValue? (dataItem.<%=em.PropertyName%>.Value?"是":"否"):string.Empty,
                        <%}else if(em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.DateTime)){%>
                <%=em.PropertyName%> = dataItem.<%=em.PropertyName%>.HasValue? dataItem.<%=em.PropertyName%>.Value.ToString("yyyy-MM-dd"):string.Empty,
                        <%}else if(em.SystemType.Contains("?")){%>
                <%=em.PropertyName%> = dataItem.<%=em.PropertyName%>.HasValue? dataItem.<%=em.PropertyName%>.Value.ToString():string.Empty,
                        <%}else if(!em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.Boolean)){%>
                <%=em.PropertyName%> = dataItem.<%=em.PropertyName%>?"是":"否",
                        <%}else if(!em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.DateTime)){%>
                <%=em.PropertyName%> = dataItem.<%=em.PropertyName%>.ToString("yyyy-MM-dd HH:mm"),
                        <% }
                        else{%>
                <%=em.PropertyName%>=dataItem.<%=em.PropertyName%>,
                        <%}%>
                    <%}
            } %>
					};
                    return dItem;
                }).ToList();
			
			
           //IList<dynamic> dataList = pageList.Items.Select(item => GetViewDataItem(item)).ToList();
                
            resultData.Result = new
            {
                DataList = dataList,
            };
            resultData.Message = "ok";
            resultData.TotalCount = pageList.TotalCount;
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
       }
       //添加
       [HttpGet]
       public async Task<OperationResult> <%=GetTableClassName(SourceTable)%>Add(){
            var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "获取数据失败!"
            };
            <%= GetTableClassName(SourceTable) %> editItem= new <%= GetTableClassName(SourceTable) %>();            
             //xmlData 使用示例
            // Dictionary<string, string> auditStatusList = IocHelper.Resolve<ArticleModule>().XmlDataCenter.GetData("AuditStatusType");
            //editItem.AuditStatusName = auditStatusList[editItem.AuditStatusId.ToString()];
            resultData.Result = new
            {
                <%= GetTableClassName(SourceTable) %> = GetViewDataItem(editItem),
            };
            resultData.Message = "ok";
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
         }
       //添加保存
       [HttpPost]
	    [PermissionKey("<%=GetTableClassName(SourceTable)%>Add")]
       public async Task<OperationResult> <%=GetTableClassName(SourceTable)%>SaveAdd(<%= GetTableClassName(SourceTable) %>  editItem){
            var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "获取数据失败!"
            };
            //数据验证，统一验证处理 
            string message = Validate(editItem);
            if (!string.IsNullOrEmpty(message))
            {
                return resultData;
            }                        
            await <%= GetTableClassName(SourceTable) %>Service.Add(editItem);            
             resultData.Result = new
            {
                <%= GetTableClassName(SourceTable) %> = GetViewDataItem(editItem),
            };

            resultData.Message = "ok";
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
           
       }
       //修改 View
       [HttpGet]
       public async Task<OperationResult> <%=GetTableClassName(SourceTable)%>Edit(long id=0){
            var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "未找到数据项!"
            };
            <%= GetTableClassName(SourceTable) %> editItem =await <%= GetTableClassName(SourceTable) %>Service.Get(dt=>dt.Id==id);
            //验证数据是否存在
           if (editItem == null || editItem.Id < 1)
            {
                return resultData;
            }
            
             //xmlData 使用示例
            // Dictionary<string, string> auditStatusList = IocHelper.Resolve<ArticleModule>().XmlDataCenter.GetData("AuditStatusType");
            //editItem.AuditStatusName = auditStatusList[editItem.AuditStatusId.ToString()];
           resultData.Result = new
            {
                <%= GetTableClassName(SourceTable) %> = GetViewDataItem(editItem),
            };
            resultData.Message = "ok";
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
       } 
       
       //修改 保存
       [HttpPost]
	    [PermissionKey("<%=GetTableClassName(SourceTable)%>Edit")]
       public async Task<OperationResult> <%=GetTableClassName(SourceTable)%>SaveEdit(<%= GetTableClassName(SourceTable) %>  editItem){
            var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "获取数据失败!"
            };
            if (editItem.Id < 1)
            {
                return resultData;
            }
            //校验
            string message = Validate(editItem);
            if (!string.IsNullOrEmpty(message))
            {
               return resultData;
            }  
            //验证值是否存在
                <%= GetTableClassName(SourceTable) %>  editInfo=await <%= GetTableClassName(SourceTable) %>Service.Get(dt=>dt.Id==editItem.Id);            
                if (editInfo == null || editInfo.Id < 1)
                {
                    return resultData;
                }
              <% foreach(EntityMember em in entityManager.MembersNoKeyNoVersion) {%>
                editInfo.<%=em.PropertyName%>=editItem.<%=em.PropertyName%>;
               <%} %>
               
             await  <%= GetTableClassName(SourceTable) %>Service.Update(editInfo);
            
              resultData.Result = new
            {
                <%= GetTableClassName(SourceTable) %> = GetViewDataItem(editItem),
            };
            resultData.Message = "ok";
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
           
       }
       // 统一验证
        private string Validate(<%= GetTableClassName(SourceTable) %> editItem){
             <% foreach(EntityMember em in entityManagerList){ 
                  if(!em.Column.AllowDBNull && em.Column.SystemType != typeof(System.Boolean)){%>
              if (string.IsNullOrEmpty(editItem.<%=em.PropertyName %>))
                {
                    return "请填写<%=GetDescription(em)%>";
                }
                <% } 
              } %>
             return "";
        }
       //统一返回
       private dynamic GetViewDataItem(<%= GetTableClassName(SourceTable) %> editItem)
        {
             var viewBagItem = new
            {
                //id
                 editItem.Id,
            <% foreach(EntityMember em in entityManager.MembersNoKeyNoVersion) { 
                    if(!DescriptionContains(em,"[hide]")){%>
                //<%=GetDescription(em) %>
                        <%if(em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.Boolean)){%>
                <%=em.PropertyName%> = editItem.<%=em.PropertyName%>.HasValue? (editItem.<%=em.PropertyName%>.Value?"是":"否"):string.Empty,
                        <%}else if(em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.DateTime)){%>
                <%=em.PropertyName%> = editItem.<%=em.PropertyName%>.HasValue? editItem.<%=em.PropertyName%>.Value.ToString("yyyy-MM-dd"):string.Empty,
                        <%}else if(em.SystemType.Contains("?")){%>
                <%=em.PropertyName%> = editItem.<%=em.PropertyName%>.HasValue? editItem.<%=em.PropertyName%>.Value.ToString():string.Empty,
                        <%}else if(!em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.Boolean)){%>
                <%=em.PropertyName%> = editItem.<%=em.PropertyName%>?"是":"否",
                        <%}else if(!em.SystemType.Contains("?")&&em.Column.SystemType == typeof(System.DateTime)){%>
                <%=em.PropertyName%> = editItem.<%=em.PropertyName%>.ToString("yyyy-MM-dd HH:mm"),
                        <% }
                        else{%>
                <%=em.PropertyName%>=editItem.<%=em.PropertyName%>,
                        <%}%>
                    <%}
            } %>
			 
            };
            
            return viewBagItem;
        }
       
       
       // 删除 统一调用 
       //todo:逻辑删除 字段未指定，需要手动调整
        [HttpPost]
       public async Task<OperationResult> <%= GetTableClassName(SourceTable) %>BatchDelete(List<long> idList){
           var resultData = new OperationResult()
            {
                StatusCode = OperationResultStatus.Error,
                Message = "获取数据失败!"
            };
            if (idList == null || idList.Count < 1)
            {
                return resultData;
            }
            
                //直接删除
                //await <%= GetTableClassName(SourceTable) %>Service.Delete(d=>idList.Contains(d.Id));
               //逻辑删除
               //IList<<%= GetTableClassName(SourceTable) %>> batchList=await <%= GetTableClassName(SourceTable) %>Service.GetList(d => idList.Contains(d.Id));
                //逻辑删除字段 修改
               // foreach (var item in batchList)
               // {
               //     item.IsDeleted = true;
               //}
               //await <%= GetTableClassName(SourceTable) %>Service.Update(batchList);
                
            <%if(isDelete){ %>
                //直接删除
               await <%= GetTableClassName(SourceTable) %>Service.Delete(d=>idList.Contains(d.Id));
            <%} else { %>
                //逻辑删除
               IList<<%= GetTableClassName(SourceTable) %>> batchList=await <%= GetTableClassName(SourceTable) %>Service.GetList(d => idList.Contains(d.Id));
                //逻辑删除字段 修改
                foreach (var item in batchList)
                {
                    item.IsDeleted = true;
                }
                
               await <%= GetTableClassName(SourceTable) %>Service.Update(batchList);
            <%} %>
            resultData.Message = "ok";
            resultData.StatusCode = OperationResultStatus.Success;
            return resultData;
       }
       
    }
}